// Import the WASM module generated by wasm-pack
// Note: Adjust the path based on where wasm-pack outputs the files (usually ../lca_core/pkg/)
async function run() {
    let lca_rs;
    try {
        // Dynamically import the wasm module
        lca_rs = await import("../lca-rs/pkg/lca_rs.js");
        // The wasm_init function is called automatically via #[wasm_bindgen(start)]
        console.log("WASM module loaded.");
    } catch (err) {
        console.error("Error loading WASM module:", err);
        setStatus("Error loading WASM module. Check console.", true);
        return; // Stop if WASM fails to load
    }

    const runButton = document.getElementById('runButton');
    const statusDiv = document.getElementById('status');
    const resultDiv = document.getElementById('result');
    const errorDiv = document.getElementById('error');

    function setStatus(message, isError = false) {
        statusDiv.textContent = `Status: ${message}`;
        statusDiv.style.color = isError ? 'red' : 'black';
        if (!isError) {
            errorDiv.textContent = ''; // Clear previous errors
        }
    }

    function displayResult(resultArray) {
        resultDiv.textContent = `Result (h): [${resultArray.join(', ')}]`;
    }

    function displayError(error) {
        console.error("LCA Calculation Error:", error);
        errorDiv.textContent = `Error: ${error}`;
    }

    runButton.addEventListener('click', async () => {
        setStatus("Running calculation...");
        runButton.disabled = true;
        resultDiv.textContent = 'Result (h):'; // Clear previous result
        errorDiv.textContent = ''; // Clear previous error

        try {
          let gpuDevice = await new lca_rs.GpuDevice()
          console.log("GPU device initialized:", gpuDevice);
          // Check if GPU device is available
          if (!gpuDevice) {
              throw new Error("No GPU device available.");
          }
         
          
          // --- Define Sample Data (Matching native example) ---
          // A = [[2, -1], [-1, 2]]
          const a_rows = 2;
          const a_cols = 2;
          const a_indptr = new Uint32Array([0, 2, 4]);
          const a_indices = new Uint32Array([0, 1, 0, 1]);
          const a_data = new Float32Array([2.0, -1.0, -1.0, 2.0]);
          const A = lca_rs.SparseMatrix.from_csr(a_rows, a_cols, a_data, a_indices, a_indptr);
          
          // B = [[1, 1]]
          const b_rows = 1;
          const b_cols = 2;
          const b_indptr = new Uint32Array([0, 2]);
          const b_indices = new Uint32Array([0, 1]);
          const b_data = new Float32Array([1.0, 1.0]);
          const B = lca_rs.SparseMatrix.from_csr(b_rows, b_cols, b_data, b_indices, b_indptr);
          
          // C = [[1], [1]]
          const c_rows = 2;
          const c_cols = 1;
          const c_indptr = new Uint32Array([0, 1, 2]);
          const c_indices = new Uint32Array([0, 0]);
          const c_data = new Float32Array([1.0, 1.0]);
          const C = lca_rs.SparseMatrix.from_csr(c_rows, c_cols, c_data, c_indices, c_indptr);

          // f = [1, 1]
          const f_data = new Float32Array([1.0, 1.0]);

          // Solver parameters
          const max_iterations = 100;
          const tolerance = 1e-3;

          console.log("Calling WASM calculate_lca function...");

          // Call the exported WASM function
          const result_h = await lca_rs.calculate_lca(
              gpuDevice,
              A,
              B,
              C,
              f_data,
              max_iterations,
              tolerance
          );

            console.log("WASM function returned:", result_h);
            setStatus("Calculation complete.");
            displayResult(result_h);

        } catch (err) {
            setStatus("Calculation failed.", true);
            displayError(err);
        } finally {
            runButton.disabled = false;
        }
    });

    setStatus("Ready. Click 'Run LCA Calculation'.");
    runButton.disabled = false; // Enable button once WASM is loaded
}

run();
